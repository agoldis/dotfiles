#!/bin/bash

declare -r EOL=$'\n' TAB=$'\t'

DEBUG=${DEBUG:-0}

THIS=$( readlink -e "$0" )
ROOT=$( dirname "$THIS" )

GIT_BRANCH=$( git rev-parse --abbrev-ref HEAD )
GIT_DESTINATION=$( printf "%s/%s" \
	"$( git config --get "branch.$GIT_BRANCH.remote" )" \
	"$( git config --get "branch.$GIT_BRANCH.merge" )" \
)
GIT_HEAD=$( cd "$ROOT" && git rev-parse "$GIT_DESTINATION" )

UPDATE_SCRIPT=$(  )
UPDATE_SCRIPT=$( \
	echo "#!/bin/bash" ; \
	printf "GIT_HEAD='%s'\n" "$GIT_HEAD" ; \
	sed -n '0,/^UPDATE_SCRIPT$/d;p' < "$THIS" \
)


function clr() {
	echo -n "\e[${1}m${2}\e[0m"
}
success="\r$( clr 32 "•" )"
working="\r$( clr 33 "•" )"
failure="\r$( clr 31 "•" )"

function set_status() {
	local status=$1
	local message=$2
	if [[ "$status" != "0" ]] ; then
		if [[ "$message" = *$EOL* ]]; then
			echo -e "${failure}"
			echo "$message"
		else
			echo -n ": $message"
			echo -e "${failure}"
		fi

	else
		echo -e "${success}"
		if [ "$DEBUG" != "0" ] ; then
			echo "$message"
		fi
	fi
}

for host in $@ ; do
	echo -ne "$working $host"
	out=$( echo -n "$UPDATE_SCRIPT" | ssh "$host" 2>&1 )
	exit_code=$?

	set_status "$exit_code" "$out"

done

exit 0

UPDATE_SCRIPT

set -e


die() {
	echo -e "$2"
	set +e
	exit $1
}

highlight() {
	printf '\e[1m%s\e[0m\n' "$@"
}

highlight "# Setting things"

git_remote="https://bitbucket.org/tim_heap/.dot-files.git/"
dot_files="$HOME/.dot-files/"

highlight "# Checking git"

[[ -n "$( which git )" ]] || die 1 "git is not installed"

highlight "# Checking for repo"
if [[ ! -d "$dot_files" ]] ; then
	git clone "$git_remote" "$dot_files" || die 1 "Could not clone $git_remote to $dot_files"
fi
cd "$dot_files"

highlight "# Matching against HEAD"
[ "$( git rev-parse HEAD )" = "$GIT_HEAD" ] && die 0 "git heads match, no update needed"

highlight "git diff"
git diff  --ignore-submodules --exit-code --color || die 2 "$dot_files has uncommitted changes"

highlight "git fetch"
git fetch origin || die 3 "Could not fetch from remote origin"
highlight "git merge"
git merge --ff-only origin/master || die 4 "Could not fast-forward merge"
highlight "git submodule sync"
git submodule sync
highlight "git submodule update --init"
git submodule update --init || die 5 "Could not update submodules"

highlight "$dot_files/create-links"
"$dot_files"/create-links &>/dev/null || die 6 "Could not link in files"
highlight "Done"
